{"remainingRequest":"/Users/alfifaisal/timerapp/node_modules/babel-loader/lib/index.js!/Users/alfifaisal/timerapp/node_modules/vuetify-loader/lib/loader.js!/Users/alfifaisal/timerapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/alfifaisal/timerapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alfifaisal/timerapp/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alfifaisal/timerapp/src/App.vue","mtime":1695035413783},{"path":"/Users/alfifaisal/timerapp/node_modules/cache-loader/dist/cjs.js","mtime":1695034926297},{"path":"/Users/alfifaisal/timerapp/node_modules/babel-loader/lib/index.js","mtime":1695034926354},{"path":"/Users/alfifaisal/timerapp/node_modules/vuetify-loader/lib/loader.js","mtime":1695034926375},{"path":"/Users/alfifaisal/timerapp/node_modules/cache-loader/dist/cjs.js","mtime":1695034926297},{"path":"/Users/alfifaisal/timerapp/node_modules/vue-loader/lib/index.js","mtime":1695034926458}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Navbar from '@/components/Navbar';\nimport Timer from '@/components/Timer';\nexport default {\n  name: 'App',\n  components: {\n    Navbar: Navbar,\n    Timer: Timer\n  },\n  data: function data() {\n    return {\n      timerState: 'stopped',\n      currentTimer: 0,\n      formattedTime: \"00:00:00\",\n      ticker: undefined,\n      laps: [],\n      latestLap: \"\",\n      snackbar: false\n    };\n  },\n  methods: {\n    start: function start() {\n      if (this.timerState !== 'running') {\n        this.tick();\n        this.timerState = 'running';\n      }\n    },\n    lap: function lap() {\n      this.snackbar = true;\n      this.laps.push({\n        seconds: this.currentTimer,\n        formattedTime: this.formatTime(this.currentTimer)\n      });\n      this.latestLap = this.formatTime(this.currentTimer);\n      this.currentTimer = 0;\n    },\n    pause: function pause() {\n      window.clearInterval(this.ticker);\n      this.timerState = 'paused';\n    },\n    stop: function stop() {\n      window.clearInterval(this.ticker);\n      this.currentTimer = 0;\n      this.formattedTime = \"00:00:00\";\n      this.timerState = \"stopped\";\n    },\n    tick: function tick() {\n      var _this = this;\n\n      this.ticker = setInterval(function () {\n        _this.currentTimer++;\n        _this.formattedTime = _this.formatTime(_this.currentTimer);\n      }, 250);\n    },\n    formatTime: function formatTime(seconds) {\n      var measuredTime = new Date(null);\n      measuredTime.setSeconds(seconds);\n      var MHSTime = measuredTime.toISOString().substr(11, 8);\n      return MHSTime;\n    }\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAA,MAAA,MAAA,qBAAA;AACA,OAAA,KAAA,MAAA,oBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,MAAA,EAAA,MADA;AAEA,IAAA,KAAA,EAAA;AAFA,GAFA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,SADA;AAEA,MAAA,YAAA,EAAA,CAFA;AAGA,MAAA,aAAA,EAAA,UAHA;AAIA,MAAA,MAAA,EAAA,SAJA;AAKA,MAAA,IAAA,EAAA,EALA;AAMA,MAAA,SAAA,EAAA,EANA;AAOA,MAAA,QAAA,EAAA;AAPA,KAAA;AASA,GAhBA;AAiBA,EAAA,OAAA,EAAA;AACA,IAAA,KADA,mBACA;AACA,UAAA,KAAA,UAAA,KAAA,SAAA,EAAA;AACA,aAAA,IAAA;AACA,aAAA,UAAA,GAAA,SAAA;AACA;AACA,KANA;AAOA,IAAA,GAPA,iBAOA;AACA,WAAA,QAAA,GAAA,IAAA;AACA,WAAA,IAAA,CAAA,IAAA,CAAA;AACA,QAAA,OAAA,EAAA,KAAA,YADA;AAEA,QAAA,aAAA,EAAA,KAAA,UAAA,CAAA,KAAA,YAAA;AAFA,OAAA;AAIA,WAAA,SAAA,GAAA,KAAA,UAAA,CAAA,KAAA,YAAA,CAAA;AACA,WAAA,YAAA,GAAA,CAAA;AACA,KAfA;AAgBA,IAAA,KAhBA,mBAgBA;AACA,MAAA,MAAA,CAAA,aAAA,CAAA,KAAA,MAAA;AACA,WAAA,UAAA,GAAA,QAAA;AACA,KAnBA;AAoBA,IAAA,IApBA,kBAoBA;AACA,MAAA,MAAA,CAAA,aAAA,CAAA,KAAA,MAAA;AACA,WAAA,YAAA,GAAA,CAAA;AACA,WAAA,aAAA,GAAA,UAAA;AACA,WAAA,UAAA,GAAA,SAAA;AACA,KAzBA;AA0BA,IAAA,IA1BA,kBA0BA;AAAA;;AACA,WAAA,MAAA,GAAA,WAAA,CAAA,YAAA;AACA,QAAA,KAAA,CAAA,YAAA;AACA,QAAA,KAAA,CAAA,aAAA,GAAA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,YAAA,CAAA;AACA,OAHA,EAGA,GAHA,CAAA;AAIA,KA/BA;AAgCA,IAAA,UAhCA,sBAgCA,OAhCA,EAgCA;AACA,UAAA,YAAA,GAAA,IAAA,IAAA,CAAA,IAAA,CAAA;AACA,MAAA,YAAA,CAAA,UAAA,CAAA,OAAA;AACA,UAAA,OAAA,GAAA,YAAA,CAAA,WAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAA;AACA,aAAA,OAAA;AACA;AArCA;AAjBA,CAAA","sourcesContent":["<template>\n  <v-app>\n    <Navbar :laps=\"laps\" />\n\n    <v-content>\n      <Timer\n        :timer=\"formattedTime\"\n        :state=\"timerState\"\n        @start=\"start\"\n        @lap=\"lap\"\n        @pause=\"pause\"\n        @stop=\"stop\"\n      />\n    </v-content>\n\n    <v-snackbar\n      v-model=\"snackbar\"\n      color=\"info\"\n      :timeout=\"2000\"\n    >\n      New Lap {{ this.latestLap }}\n      <v-btn dark flat @click=\"snackbar = false\">Close</v-btn>\n    </v-snackbar>\n  </v-app>\n</template>\n\n<script>\nimport Navbar from '@/components/Navbar';\nimport Timer from '@/components/Timer';\n\nexport default {\n  name: 'App',\n  components: {\n    Navbar,\n    Timer\n  },\n  data () {\n    return {\n      timerState: 'stopped',\n      currentTimer: 0,\n      formattedTime: \"00:00:00\",\n      ticker: undefined,\n      laps: [],\n      latestLap: \"\",\n      snackbar: false\n    }\n  },\n  methods: {\n    start () {\n      if (this.timerState !== 'running') {\n        this.tick();\n        this.timerState = 'running';\n      }\n    },\n    lap () {\n      this.snackbar = true;\n      this.laps.push({\n        seconds: this.currentTimer,\n        formattedTime: this.formatTime(this.currentTimer)\n      });\n      this.latestLap = this.formatTime(this.currentTimer);\n      this.currentTimer = 0;\n    },\n    pause () {\n      window.clearInterval(this.ticker);\n      this.timerState = 'paused';\n    },\n    stop () {\n      window.clearInterval(this.ticker)\n      this.currentTimer = 0;\n      this.formattedTime = \"00:00:00\";\n      this.timerState = \"stopped\";\n    },\n    tick () {\n      this.ticker = setInterval(() => {\n        this.currentTimer++;\n        this.formattedTime = this.formatTime(this.currentTimer);\n      }, 250)\n    },\n    formatTime (seconds) {\n      let measuredTime = new Date(null);\n      measuredTime.setSeconds(seconds);\n      let MHSTime = measuredTime.toISOString().substr(11, 8);\n      return MHSTime;\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src"}]}